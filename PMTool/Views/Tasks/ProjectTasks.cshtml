@model IEnumerable<PMTool.Models.Task>

@{
    if (ViewBag.CurrentProject != null)
    {
        PMTool.Models.Project projetc = (PMTool.Models.Project)ViewBag.CurrentProject;
        ViewBag.Title = projetc.Name + " | Tasks";
    }
}




<div class="pagetitle">
    <h1>Task List</h1>
    <span>@(((PMTool.Models.Project)ViewBag.CurrentProject).Name)  Tasks....</span>
</div>


<p>
    @Html.ActionLink("Create New", "Create", new { @ProjectID = ((PMTool.Models.Project)ViewBag.CurrentProject).ProjectID }, new { @title = "Add Task", @class = "btn btn-primary" })
||
    @Html.ActionLink("View Kanban", "Kanban", new { @ProjectID = ((PMTool.Models.Project)ViewBag.CurrentProject).ProjectID }, new { @title = "View Kanban", @class = "btn btn-inverse" })
</p>
<table class="table table-bordered" id="dyntable">
    <thead>
        <tr>
            <th>Project Name
            </th>
            <th>Title
            </th>
            <th>Description</th>
            <th>Sub Tasks
            </th>
            <th>Add Sub Task</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @item.Project.Name
                </td>
                <td>
                    @Html.DisplayTextFor(_ => item.Title).ToString()
                </td>
                <td>
                    @Html.DisplayTextFor(_ => item.Description).ToString()
                </td>
                <td>
                    @if (item.ChildTask.Count > 0)
                    {
                        <div class="btn-group">
                            <button class="btn btn-small">Sub Tasks (@item.ChildTask.Count)</button>
                            <button class="btn btn-small dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button>
                            <ul class="dropdown-menu">
                                @foreach (PMTool.Models.Task task in item.ChildTask)
                                {
                                    <li>@Html.ActionLink(task.Title, "Edit", new { id = task.TaskID }, new { @target = "_blank" })</li>
                                
                                }
                                <li class="divider"></li>
                                <li>@Html.ActionLink("All Sub Tasks", "SubTaskList", new { ProjectID = item.ProjectID, TaskID = item.TaskID }, new { @target = "_blank" })</li>


                            </ul>
                        </div>
                    }
                    @if (item.ChildTask.Count == 0)
                    {
                        @Html.Raw("No Sub Task")
                    }

                </td>
                <td>
                    @Html.ActionLink("Add SubTask", "CreateSubTask", new { ProjectID = item.ProjectID, TaskID = item.TaskID }, new { @title = "Add SubTask" })
                </td>
                <td align="center">
                    @Html.ActionLink(" ", "Edit", new { id = item.TaskID }, new { @class = "icon-edit", @title = "Edit" })
                    |
                    @Html.ActionLink(" ", "Details", new { id = item.TaskID }, new { @class = "icon-list-alt", @title = "Details" })
                    |
                    @Html.ActionLink(" ", "Delete", new { id = item.TaskID }, new { @class = "icon-trash", @title = "Delete" })
                </td>
            </tr>
        }
    </tbody>
</table>


<script type="text/javascript">
		
		function onAddTag(tag) {
			alert("Added a tag: " + tag);
		}
		function onRemoveTag(tag) {
			alert("Removed a tag: " + tag);
		}
		
		function onChangeTag(input,tag) {
			alert("Changed a tag: " + tag);
		}
		
		jQuery(function() {

			jQuery('#tags_1').tagsInput({width:'auto'});
			jQuery('#tags_2').tagsInput({
				width: 'auto',
				onChange: function(elem, elem_tags)
				{
					var languages = ['php','ruby','javascript'];
					jQuery('.tag', elem_tags).each(function()
					{
						if(jQuery(this).text().search(new RegExp('\\b(' + languages.join('|') + ')\\b')) >= 0)
							jQuery(this).css('background-color', 'yellow');
					});
				}
			});
			jQuery('#tags_3').tagsInput({
				width: 'auto',

				//autocomplete_url:'test/fake_plaintext_endpoint.html' //jquery.autocomplete (not jquery ui)
				autocomplete_url:'test/fake_json_endpoint.html' // jquery ui autocomplete requires a json endpoint
			});
			

// Uncomment this line to see the callback functions in action
//			jQuery('input.tags').tagsInput({onAddTag:onAddTag,onRemoveTag:onRemoveTag,onChange: onChangeTag});		

// Uncomment this line to see an input with no interface for adding new tags.
//			jQuery('input.tags').tagsInput({interactive:false});
		});
    </script>