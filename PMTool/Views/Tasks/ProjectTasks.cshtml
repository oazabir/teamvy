@model IEnumerable<PMTool.Models.Task>

@{
    if (ViewBag.CurrentProject != null)
    {
        PMTool.Models.Project projetc = (PMTool.Models.Project)ViewBag.CurrentProject;
        ViewBag.Title = projetc.Name + " | Tasks";
    }
}



<div class="pagetitle">
    <h1>Task List</h1>
    <span>@(((PMTool.Models.Project)ViewBag.CurrentProject).Name)  Tasks....</span>
</div>


<p>
    @Html.ActionLink("Create New", "Create", new { @ProjectID = ((PMTool.Models.Project)ViewBag.CurrentProject).ProjectID }, new { @title = "Add Task", @class = "btn btn-primary" })
    ||
    @Html.ActionLink("View Kanban", "Kanban", new { @ProjectID = ((PMTool.Models.Project)ViewBag.CurrentProject).ProjectID }, new { @title = "View Kanban", @class = "btn btn-inverse" })
    || 
  @*  Status*@

    @*<select id="Status" name="Status">
    @Html.DropDownListFor(model => model.ProjectStatusID, ((IEnumerable<PMTool.Models.ProjectStatus>)ViewBag.TaskStatus).Select(option => new SelectListItem
   {
       Text = (option == null ? "None" : option.Name), 
       Value = option.ProjectStatusID.ToString(),
       Selected = (Model != null) && (option.ProjectStatusID == Model.ProjectStatusID)
   }), "Choose...")
     </select>*@

    @*@Html.DropDownList("TaskStatus", "Choose...")*@



</p>

@{
    PMTool.Models.Project project = (PMTool.Models.Project)ViewBag.CurrentProject;
    Html.RenderAction("_Search", "Tasks", new { projectID = project.ProjectID });
}

<div id="divTaskList" >
          <table class="table table-bordered dyntable" id="dyntable5">

    @{@Html.Partial("_TaskList", Model)}
        </table>



</div>

<script type="text/javascript">

    function onAddTag(tag) {
        alert("Added a tag: " + tag);
    }
    function onRemoveTag(tag) {
        alert("Removed a tag: " + tag);
    }

    function onChangeTag(input, tag) {
        alert("Changed a tag: " + tag);
    }

    jQuery(function () {

        jQuery('#tags_1').tagsInput({ width: 'auto' });
        jQuery('#tags_2').tagsInput({
            width: 'auto',
            onChange: function (elem, elem_tags) {
                var languages = ['php', 'ruby', 'javascript'];
                jQuery('.tag', elem_tags).each(function () {
                    if (jQuery(this).text().search(new RegExp('\\b(' + languages.join('|') + ')\\b')) >= 0)
                        jQuery(this).css('background-color', 'yellow');
                });
            }
        });
        jQuery('#tags_3').tagsInput({
            width: 'auto',

            //autocomplete_url:'test/fake_plaintext_endpoint.html' //jquery.autocomplete (not jquery ui)
            autocomplete_url: 'test/fake_json_endpoint.html' // jquery ui autocomplete requires a json endpoint
        });


        //jQuery('#TaskStatus').change(function () {

        //    alert('Working!!');

        //});


        // Uncomment this line to see the callback functions in action
        //			jQuery('input.tags').tagsInput({onAddTag:onAddTag,onRemoveTag:onRemoveTag,onChange: onChangeTag});		

        // Uncomment this line to see an input with no interface for adding new tags.
        //			jQuery('input.tags').tagsInput({interactive:false});
    });
</script>
