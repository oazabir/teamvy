@model PMTool.Models.Task

<script type="text/javascript">

    jQuery.noConflict();
    jQuery().ready(function () {
        jQuery('textarea.tinymce').tinymce({
            // Location of TinyMCE script
            script_url: '../../Content/themes/site/js/tinymce/tiny_mce.js',

            // General options
            theme: "advanced",
            skin: "themepixels",
            width: "100%",
            plugins: "autolink,lists,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,advlist",
            inlinepopups_skin: "themepixels",
            // Theme options
            theme_advanced_buttons1: "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,outdent,indent,blockquote,formatselect,fontselect,fontsizeselect",
            theme_advanced_buttons2: "pastetext,pasteword,|,bullist,numlist,|,undo,redo,|,link,unlink,image,help,code,|,preview,|,forecolor,backcolor,removeformat,|,charmap,media,|,fullscreen",
            theme_advanced_buttons3: "",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,

            // Example content CSS (should be your site CSS)
            content_css: document.location.host + "/Content/themes/site/css/plugins/tinymce.css",

            // Drop lists for link/image/media/template dialogs
            template_external_list_url: "lists/template_list.js",
            external_link_list_url: "lists/link_list.js",
            external_image_list_url: "lists/image_list.js",
            media_external_list_url: "lists/media_list.js",

            // Replace values for the template plugin
            template_replace_values: {
                username: "Some User",
                staffid: "991234"
            }
        });


        jQuery('.editornav a').click(function () {
            jQuery('.editornav li.current').removeClass('current');
            jQuery(this).parent().addClass('current');
            if (jQuery(this).hasClass('visual'))
                jQuery('#elm1').tinymce().show();
            else
                jQuery('#elm1').tinymce().hide();
            return false;
        });
    });

    </script>

<tr>
    <td>
        @Html.LabelFor(model => model.Title)
    </td>
    <td>
        @Html.EditorFor(model => model.Title)
        @Html.ValidationMessageFor(model => model.Title)
    </td>
</tr>


<tr>
    <td>
        @Html.LabelFor(model => model.Description)
    </td>
    <td>
        @Html.TextAreaFor(model => model.Description,  new { @class = "tinymce" })
        @Html.ValidationMessageFor(model => model.Description)

          
    </td>
</tr>


<tr>
    <td>
        @Html.LabelFor(model => model.StartDate)
    </td>
    <td>

        @Html.TextBoxFor(model => model.StartDate, "{0:dd/MM/yyyy}",  new { @class = "datepicker" })
        @Html.ValidationMessageFor(model => model.StartDate)
    </td>
</tr>

<tr>
    <td>
        @Html.LabelFor(model => model.EndDate)
    </td>
    <td>
        @Html.TextBoxFor(model => model.EndDate, "{0:dd/MM/yyyy}",  new { @class = "datepicker" })
        @Html.ValidationMessageFor(model => model.EndDate)
    </td>
</tr>

<tr>
    <td>
        @Html.LabelFor(model => model.TaskHour)
    </td>
    <td>
        @Html.EditorFor(model => model.TaskHour)
        @Html.ValidationMessageFor(model => model.TaskHour)
    </td>
</tr>
<tr>
    <td>
        @Html.LabelFor(model => model.ActualTaskHoure)
    </td>
    <td>
        @Html.EditorFor(model => model.ActualTaskHoure)
        @Html.ValidationMessageFor(model => model.ActualTaskHoure)
    </td>
</tr>
<tr>
    <td>Priority
    </td>
    <td>
        @Html.DropDownListFor(model => model.PriorityID, ((IEnumerable<PMTool.Models.Priority>)ViewBag.PossiblePriorities).Select(option => new SelectListItem
   {
       Text = (option == null ? "None" : option.Name),
       Value = option.PriorityID.ToString(),
       Selected = (Model != null) && (option.PriorityID == Model.PriorityID)
   }), "None")
@*        @Html.ValidationMessageFor(model => model.PriorityID)*@
    </td>
</tr>

<script type="text/javascript">

    jQuery(document).ready(function () {

        jQuery('.chosen').chosen();

        
    });
</script>
<script type="text/javascript">
    jQuery(document).ready(function () {
        jQuery("#txtFromDate").datepicker({
            numberOfMonths: 2,
            onSelect: function (selected) {
                jQuery("#StartDate").datepicker("option", "minDate", selected)
            }
        });
        jQuery("#txtToDate").datepicker({
            numberOfMonths: 2,
            onSelect: function (selected) {
                jQuery("#EndDate").datepicker("option", "maxDate", selected)
            }
        });
    });

</script>
<script type="text/javascript">
    jQuery(".datepicker").datepicker({
        onSelect: function () {
            var sdate = jQuery("#StartDate").val().replace('-', '/');
            var edate = jQuery("#EndDate").val().replace('-', '/');
            if (new Date(sdate) < new Date(edate)) {
                alert('Start Date Mustbe grater than End Date');
                var edate = jQuery("#EndDate").val('');
            }
        }
    });
</script>
<script type="text/javascript">
    jQuery(".chosen").chosen({ max_selected_options: 10 });
    jQuery(".chosen-deselect").chosen({ allow_single_deselect: true });
    jQuery(".chosen").chosen().change();
    jQuery(".chosen").trigger('liszt:updated');

    var selectedUserID = jQuery('Select#Users').val();
    var Users = "";

    if (selectedUserID != null) {
        jQuery.each(selectedUserID, function (index, value) {
            Users = Users + value + ",";
        });

        var UserArray = new Array();
        jQuery('Select#Users').val(UserArray);

        jQuery('.chzn-select').trigger('chosen:updated');
    }

    var selectedFollowedUserID = jQuery('Select#Users').val();
    var Followers = "";

    if (selectedFollowedUserID != null) {
        jQuery.each(selectedFollowedUserID, function (index, value) {
            Followers = Followers + value + ",";
        });

        var FollowedUserArray = new Array();
        jQuery('Select#Followers').val(FollowedUserArray);

        jQuery('.chzn-select').trigger('chosen:updated');
    }

    var SelectedLabelID = jQuery('Select#Labels').val();
    var Labels = "";

    if (SelectedLabelID != null) {
        jQuery.each(SelectedLabelID, function (index, value) {
            Labels = Labels + value + ",";
        });

        var LabelArray = new Array();
        jQuery('Select#Labels').val(LabelArray);

        jQuery('.chzn-select').trigger('chosen:updated');
    }
</script>

<tr>
    <td>Assigned To
    </td>
    <td>
        @Html.ListBoxFor(m => m.SelectedAssignedUsers, (IEnumerable<SelectListItem>)ViewBag.PossibleUsers,
            new { @class = "chosen", multiple = "multiple", style = "width: 350px;" })
    </td>
</tr>

<tr>
    <td>Follower 
    </td>
    <td>
       
        @Html.ListBoxFor(m => m.SelectedFollowedUsers, (IEnumerable<SelectListItem>)ViewBag.PossibleUsers,
            new { @class = "chosen", multiple = "multiple", style = "width: 350px;" })
    </td>
</tr>

<tr>
    <td>Label 
    </td>
    <td>
       
        @Html.ListBoxFor(m => m.SelectedLabels, (IEnumerable<SelectListItem>)ViewBag.PossibleLabels,
            new { @class = "chosen", multiple = "multiple", style = "width: 350px;" })
    </td>
</tr>


@*<tr>
    <td>Status
    </td>
    <td>
        <select id="Status" name="Status">
            <option value="">Choose...</option>
            @foreach (SelectListItem item in (IEnumerable<SelectListItem>)ViewBag.PossibleTaskStatus)
            {
                <option value="@item.Value" selected="@item.Selected">@item.Text</option>
            }
        </select>
    </td>
</tr>*@

<tr>
    <td>Status
    </td>
    <td>
        @Html.DropDownListFor(model => model.ProjectStatusID, ((IEnumerable<PMTool.Models.ProjectStatus>)ViewBag.PossibleTaskStatus).Select(option => new SelectListItem
   {
       Text = (option == null ? "None" : option.Name),
       Value = option.ProjectStatusID.ToString(),
       Selected = (Model != null) && (option.ProjectStatusID == Model.ProjectStatusID)
   }), "Choose...")
    </td>
</tr>
            <tr>
                <td>Sprint
                </td>
                <td>
                    @Html.DropDownListFor(model => model.SprintID, ((IEnumerable<PMTool.Models.Sprint>)ViewBag.PossibleSprints).Select(option => new SelectListItem
                    {
                        Text = (option == null ? "None" : option.Name),
                        Value = option.SprintID.ToString(),
                        Selected = (Model != null) && (option.SprintID == Model.SprintID)
                    }), "Choose...")
                    @Html.ValidationMessageFor(model => model.SprintID)
                </td>
            </tr>