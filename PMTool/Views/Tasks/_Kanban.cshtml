<script type="text/javascript">
    jQuery(document).ready(function () {
        jQuery("#Modalpopup").modal('hide');
        jQuery("#ModalpopupProject").modal('hide');
        jQuery("#ModalpopupTask").modal('hide');
        jQuery("#ModalpopupEditStatus").modal('hide');
        jQuery("#ModalpopupCreateSprint").modal('hide');
        jQuery('.dragbox')
        .each(function () {
            jQuery(this).hover(function () {
                //jQuery(this).find('h2').addClass('collapse');
            }, function () {
                //jQuery(this).find('h2').removeClass('collapse');
            })
            .find('h2').hover(function () {
                //jQuery(this).find('.configure').css('visibility', 'visible');
            }, function () {
                //jQuery(this).find('.configure').css('visibility', 'hidden');
            })
            .click(function () {
                jQuery(this).siblings('.dragbox-content').toggle();
            })
            .end();
            //.find('.configure').css('visibility', 'hidden');
        });
        jQuery('.column').sortable({
            connectWith: '.column',
            handle: 'h2',
            cursor: 'move',
            placeholder: 'placeholder',
            forcePlaceholderSize: true,
            opacity: 0.4,
            receive: function (event, ui) {
                //jQuery(ui.item).find('h2').click();
                //var sortorder = '';

                var columnId = jQuery(this).attr('id');
                var taskId = ui.item[0].id;
                if (taskId != null && columnId != null)
                    UpdateRecord(taskId, columnId);
                /*Pass sortorder variable to server using ajax to save state*/
            }
        })
        .disableSelection();
    });
    function UpdateRecord(task, status) {
        jQuery.ajax({
            url: '@Url.Action("Kanban", "Tasks")',
            data: { taskid: task, statusid: status },
            type: 'POST',
            success: function (data) {
                var msg = new String(data);
                if (msg.indexOf('T') == 0)
                    jQuery.jGrowl(data, { life: 5000 });
            },
            error: function (xhr, textStatus, errorThrown) {
                jQuery.jGrowl('somethig is wrong', { life: 5000 });
            }
        });
    }
</script>

@model IEnumerable<PMTool.Models.Task>
@{
    List<PMTool.Models.ProjectStatus> columnList = new List<PMTool.Models.ProjectStatus>();
    if (((PMTool.Models.Project)ViewBag.CurrentProject).ProjectStatuses != null)
    {
        columnList = ((PMTool.Models.Project)ViewBag.CurrentProject).ProjectStatuses.OrderBy(p => p.ProjectStatusID).ToList();
    }
    List<PMTool.Models.Task> taskList = (List<PMTool.Models.Task>)Model;
    PMTool.Models.Project currentProject = ((PMTool.Models.Project)ViewBag.CurrentProject);
@*<div class="tabbable tabs-below">
        <!-- change tabs-left for left-->
        <ul class="nav nav-tabs">
            <li class=""><a data-toggle="tab" href="#A">Section 1</a></li>
            <li class=""><a data-toggle="tab" href="#B">Section 2</a></li>
            <li class=""><a data-toggle="tab" href="#C">Section 3</a></li>
        </ul>
        <div class="tab-content">
            <div id="A" class="tab-pane">

                A...
        
            </div>
            <div id="B" class="tab-pane">B... </div>
            <div id="C" class="tab-pane">C... </div>
            ...
        </div>


    </div>*@
    if (currentProject.Sprints != null)
    {
    <div class="tabbable tabs-below">
        <ul class="nav nav-tabs">
            @foreach (PMTool.Models.Sprint sprint in currentProject.Sprints)
            {
                <!-- change tabs-left for left-->
                string gsprintId = "sprintId"+sprint.SprintID;
                <li class=""><a data-toggle="tab" href="#@gsprintId">@sprint.Name</a></li>
            }
        </ul>
        <div class="tab-content">

            @foreach (PMTool.Models.Sprint sprint in currentProject.Sprints)
            {
                string gsprintId = "sprintId" + sprint.SprintID;
                <div id="@gsprintId" class="tab-pane">
                    @sprint.Description
        
                </div>
          
            }

        </div>

        @*

                    <ul class="nav nav-tabs">
                    <li class=""><a data-toggle="tab" href="#A">Section 1</a></li>
                    <li class=""><a data-toggle="tab" href="#B">Section 2</a></li>
                    <li class=""><a data-toggle="tab" href="#C">Section 3</a></li>
                </ul>
                <div class="tab-content">
                    <div id="A" class="tab-pane">

                        A...
        
                    </div>
                    <div id="B" class="tab-pane">B... </div>
                    <div id="C" class="tab-pane">C... </div>
                    ...
                </div>*@


        @*               }*@
    </div>
    }
    <fieldset class='column' id=' '>
        <legend class="widgettitle ctitle">UnAssigned</legend>
        @foreach (PMTool.Models.Task item in taskList.Where(t => t.ProjectStatusID == null))
        {
            <div class="dragbox" id="@item.TaskID">
                <h2>@item.Title</h2>
                <div class="dragbox-content" style="display: none;">
                    @item.Description
                    <a id="showdata" onclick="return ShowEditForm(@item.TaskID)">Edit </a>
                </div>
            </div>
        }
    </fieldset>
        
    foreach (PMTool.Models.ProjectStatus status in columnList)
    {
        long CurrentPorjectID = ((PMTool.Models.Project)ViewBag.CurrentProject).ProjectID;
    <fieldset class='column' id='@status.ProjectStatusID'>
        <legend class="widgettitle ctitle">@status.Name
            @Ajax.ActionLink(" ", "RemoveStatusFormKanban", "Tasks", new { status = status.ProjectStatusID, projectID = CurrentPorjectID }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "kanbanBoard", OnBegin = "return confirm('Are you suer???\\nAll tasks under this column will go to UnAssigned!!!')" }, new { @class = "icon-remove", @style = "float:right;" })

            <a onclick="return ShowStatusEditForm(@status.ProjectStatusID,@CurrentPorjectID)" class="icon-edit" style="float:left"></a>
        </legend>
        @foreach (PMTool.Models.Task item in taskList.Where(t => t.ProjectStatusID == status.ProjectStatusID))
        {
            <div class="dragbox" id="@item.TaskID">
                <h2>@item.Title</h2>
                <div class="dragbox-content" style="display: none;">
                    @item.Description
                    <a id="showdata" onclick="return ShowEditForm(@item.TaskID)">Edit </a>
                </div>
            </div>
        }
    </fieldset>
    }
}