<script type="text/javascript">
    jQuery(document).ready(function () {
        jQuery("#Modalpopup").modal('hide');
        jQuery("#ModalpopupProject").modal('hide');
        jQuery("#ModalpopupTask").modal('hide');
        jQuery("#ModalpopupEditStatus").modal('hide');
        jQuery("#ModalpopupCreateSprint").modal('hide');
        jQuery('.dragbox')
        .each(function () {
            jQuery(this).hover(function () {
                //jQuery(this).find('h2').addClass('collapse');
            }, function () {
                //jQuery(this).find('h2').removeClass('collapse');
            })
            .find('h2').hover(function () {
                //jQuery(this).find('.configure').css('visibility', 'visible');
            }, function () {
                //jQuery(this).find('.configure').css('visibility', 'hidden');
            })
            .click(function () {
                jQuery(this).siblings('.dragbox-content').toggle();
            })
            .end();
            //.find('.configure').css('visibility', 'hidden');
        });
        jQuery('.column').sortable({
            connectWith: '.column',
            handle: 'h2',
            cursor: 'move',
            placeholder: 'placeholder',
            forcePlaceholderSize: true,
            opacity: 0.4,
            receive: function (event, ui) {
                //jQuery(ui.item).find('h2').click();
                //var sortorder = '';

                var columnId = jQuery(this).attr('id');
                var taskId = ui.item[0].id;
                var sprintId = this.parentNode.id.replace('sprintId', '');
                if (taskId != null && columnId != null)
                    UpdateRecord(taskId, columnId, sprintId);
                /*Pass sortorder variable to server using ajax to save state*/
            }
        })
        .disableSelection();

        activate_tab();

    });

    function activate_tab() {
        //jQuery('ul.nav > li').click(function (e) {
        //    jQuery('ul.nav > li').removeClass('active');
        //    jQuery(this).addClass('active');
        //    //e.preventDefault();
        //});
    }
    function UpdateRecord(task, status, sprintId) {
        jQuery.ajax({
            url: '@Url.Action("Kanban", "Tasks")',
            data: { taskid: task, statusid: status, sprintid: sprintId },
            type: 'POST',
            success: function (data) {
                var msg = new String(data);
                if (msg.indexOf('T') == 0)
                    jQuery.jGrowl(data, { life: 5000 });
            },
            error: function (xhr, textStatus, errorThrown) {
                jQuery.jGrowl('somethig is wrong', { life: 5000 });
            }
        });
    }
</script>

@model IEnumerable<PMTool.Models.Task>
<div class="projectBacklog">

    <fieldset class='column' id=' '>
        <legend class="widgettitle ctitle">Project Backlog</legend>
        @{
            
            foreach (PMTool.Models.Task item in Model.Where(t => t.ProjectStatusID == null && t.SprintID == null))
            {
            <div class="dragbox" id="@item.TaskID">
                <h2>@item.Title</h2>
                <div class="dragbox-content" style="display: none;">
                    @item.Description
                    <a id="showdata" onclick="return ShowEditForm(@item.TaskID)">Edit </a>
                </div>
            </div>
            }
        }
    </fieldset>
</div>


<div class="sprintDashboard">
    @{
        List<PMTool.Models.ProjectStatus> columnList = new List<PMTool.Models.ProjectStatus>();
        if (((PMTool.Models.Project)ViewBag.CurrentProject).ProjectStatuses != null)
        {
            columnList = ((PMTool.Models.Project)ViewBag.CurrentProject).ProjectStatuses.OrderBy(p => p.ProjectStatusID).ToList();
        }
        List<PMTool.Models.Task> taskList = (List<PMTool.Models.Task>)Model;
        PMTool.Models.Project currentProject = ((PMTool.Models.Project)ViewBag.CurrentProject);

        if (currentProject.Sprints != null)
        {
            bool flag = true;
            string Cssclass = "active";
            string CssclassPanActive = "tab-pane active";
        <div class="tabbable tabs-below">
            <ul class="nav nav-tabs">

                @foreach (PMTool.Models.Sprint sprint in currentProject.Sprints)
                {
                    <!-- change tabs-left for left-->
                
                    string gsprintId = "sprintId" + sprint.SprintID;
                    
                    <li class="@Cssclass"><a data-toggle="tab" href="#@gsprintId">@sprint.Name</a></li>
                    Cssclass = "";
                   
                }
            </ul>
            <div class="tab-content">
 
           
            @foreach (PMTool.Models.Sprint sprint in currentProject.Sprints)
            {
                string gsprintId = "sprintId" + sprint.SprintID;
            
                
                <div id = "@gsprintId" class="@CssclassPanActive">
          
        
                            
                    <fieldset class='column' id=' '>
                        <legend class="widgettitle ctitle">@sprint.Name  Backlog</legend>
                        @foreach (PMTool.Models.Task item in taskList.Where(t => t.ProjectStatusID == null && t.SprintID == sprint.SprintID))
                        {
                            <div class="dragbox" id="@item.TaskID">
                                <h2>@item.Title</h2>
                                <div class="dragbox-content" style="display: none;">
                                    @item.Description
                                    <a id="showdata" onclick="return ShowEditForm(@item.TaskID)">Edit </a>
                                    <a  href="#"  onclick="return ShowActivity(@item.TaskID)"><span class="icon-plus" for="showSprint"></span>Show Activity</a>
                                </div>
                            </div>
                        }
                    </fieldset>

                    @foreach (PMTool.Models.ProjectStatus status in columnList)
                    {
                        long CurrentPorjectID = ((PMTool.Models.Project)ViewBag.CurrentProject).ProjectID;
                        <fieldset class='column' id='@status.ProjectStatusID'>
                            <legend class="widgettitle ctitle">@status.Name
                                @Ajax.ActionLink(" ", "RemoveStatusFormKanban", "Tasks", new { status = status.ProjectStatusID, projectID = CurrentPorjectID }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "kanbanBoard", OnBegin = "return confirm('Are you suer???\\nAll tasks under this column will go to UnAssigned!!!')" }, new { @class = "icon-remove", @style = "float:right;" })

                                <a onclick="return ShowStatusEditForm(@status.ProjectStatusID,@CurrentPorjectID)" class="icon-edit" style="float:left"></a>
                            </legend>
                            @foreach (PMTool.Models.Task item in taskList.Where(t => t.ProjectStatusID == status.ProjectStatusID && t.SprintID == sprint.SprintID))
                            {
                                <div class="dragbox" id="@item.TaskID">
                                    <h2>@item.Title</h2>
                                    <div class="dragbox-content" style="display: none;">
                                        @item.Description
                                        <a id="showdata" onclick="return ShowEditForm(@item.TaskID)">Edit </a>
                                    </div>
                                </div>
                            }
                        </fieldset>
                    }
                </div>
          
                CssclassPanActive = "tab-pane";
            }

            </div>

        </div>
        
        }
    
    }
</div>

    <script src="~/Content/themes/site/js/jquery.fileupload.js"></script>
    <script src="~/Content/themes/site/js/jquery.fileupload-ui.js"></script>
    <script src="~/Content/themes/site/js/jquery.iframe-transport.js"></script>
<script type="text/javascript">

    var jqXHRData;

    jQuery(document).ready(function () {

        initSimpleFileUpload();
        initAutoFileUpload();
        initFileUploadWithCheckingSize();

        jQuery("#hl-start-upload").on('click', function () {
            if (jqXHRData) {
                jqXHRData.submit();
            }
            return false;
        });

        jQuery("#hl-start-upload-with-size").on('click', function () {
            if (jqXHRData) {
                var isStartUpload = true;
                var uploadFile = jqXHRData.files[0];

                if (!(/\.(gif|jpg|jpeg|tiff|png)jQuery/i).test(uploadFile.name)) {
                    alert('You must select an image file only');
                    isStartUpload = false;
                } else if (uploadFile.size > 4000000) { // 4mb
                    alert('Please upload a smaller image, max size is 4 MB');
                    isStartUpload = false;
                }
                if (isStartUpload) {
                    jqXHRData.submit();
                }
            }
            return false;
        });
    });

    function initSimpleFileUpload() {
        'use strict';

        jQuery('#fu-my-simple-upload').fileupload({
            url: '@Url.Action("Activity", "Tasks")',
                dataType: 'json',
                add: function (e, data) {
                    jqXHRData = data
                },
                done: function (event, data) {
                    if (data.result.isUploaded) {

                    }
                    else {

                    }
                    alert(data.result.message);
                },
                fail: function (event, data) {
                    if (data.files[0].error) {
                        alert(data.files[0].error);
                    }
                }
            });
        }

        function initAutoFileUpload() {
            'use strict';

            jQuery('#fu-my-auto-upload').fileupload({
                autoUpload: true,
                url: '/File/UploadFile',
                dataType: 'json',
                add: function (e, data) {
                    var jqXHR = data.submit()
                        .success(function (data, textStatus, jqXHR) {
                            if (data.isUploaded) {

                            }
                            else {

                            }
                            alert(data.message);
                        })
                        .error(function (data, textStatus, errorThrown) {
                            if (typeof (data) != 'undefined' || typeof (textStatus) != 'undefined' || typeof (errorThrown) != 'undefined') {
                                alert(textStatus + errorThrown + data);
                            }
                        });
                },
                fail: function (event, data) {
                    if (data.files[0].error) {
                        alert(data.files[0].error);
                    }
                }
            });
        }

        function initFileUploadWithCheckingSize() {
            'use strict';

            jQuery('#fu-my-simple-upload-with-size').fileupload({
                url: '/File/UploadFile',
                dataType: 'json',
                add: function (e, data) {
                    jqXHRData = data;

                },
                done: function (event, data) {
                    if (data.result.isUploaded) {

                    }
                    else {

                    }
                    alert(data.result.message);
                },
                fail: function (event, data) {
                    if (data.files[0].error) {
                        alert(data.files[0].error);
                    }
                }
            });
        }

    </script>