@model PMTool.Models.Task

@{
    ViewBag.Title = "Add | Task";
}


@if (TempData["Message"] != null)
{
    <div class="alert alert-info">
        <button class="close" data-dismiss="alert" type="button">×</button>
        <strong>Warning!</strong>
        @TempData["Message"]
    </div>
}

<div class="pagetitle">
    <h1>Task Edit
    </h1>
    <span>Edit Task below....</span>
</div>
@using (Ajax.BeginForm("CreateFromKanban", "Tasks", new AjaxOptions { UpdateTargetId = "kanbanBoard", OnBegin = "Loading()", OnComplete = "Unload()", OnSuccess = "HidePopup('ModalpopupTask')" }, new { @id = "form" }))
{
    @Html.ValidationSummary(true)
     

    @Html.HiddenFor(model => model.ProjectID)
   
    <table class="table table-bordered table-invoice">
        <tbody>
            <tr>
                <td class="width30">Project
                </td>
                <td>
                    @Html.DisplayTextFor(model => model.Project.Name)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.Title)
                </td>
                <td>
                    @Html.EditorFor(model => model.Title)
                    @Html.ValidationMessageFor(model => model.Title)
                </td>
            </tr>


            <tr>
                <td>
                    @Html.LabelFor(model => model.Description)
                </td>
                <td>
                    @Html.EditorFor(model => model.Description)
                    @Html.ValidationMessageFor(model => model.Description)
                </td>
            </tr>


            <tr>
                <td>
                    @Html.LabelFor(model => model.StartDate)
                </td>
                <td>

                    @Html.TextBoxFor(model => model.StartDate, "{0:dd/MM/yyyy}", new { @class = "datepicker", @style = "z-index:2000;" })
                    @Html.ValidationMessageFor(model => model.StartDate)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.EndDate)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.EndDate, "{0:dd/MM/yyyy}", new { @class = "datepicker", @style = "z-index:2000;" })
                    @Html.ValidationMessageFor(model => model.EndDate)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.TaskHour)
                </td>
                <td>
                    @Html.EditorFor(model => model.TaskHour)
                    @Html.ValidationMessageFor(model => model.TaskHour)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.ActualTaskHoure)
                </td>
                <td>
                    @Html.EditorFor(model => model.ActualTaskHoure)
                    @Html.ValidationMessageFor(model => model.ActualTaskHoure)
                </td>
            </tr>
            <tr>
                <td>Priority
                </td>
                <td>
                    @Html.DropDownListFor(model => model.PriorityID, ((IEnumerable<PMTool.Models.Priority>)ViewBag.PossiblePriorities).Select(option => new SelectListItem
   {
       Text = (option == null ? "None" : option.Name),
       Value = option.PriorityID.ToString(),
       Selected = (Model != null) && (option.PriorityID == Model.PriorityID)
   }), "Choose...")
                    @Html.ValidationMessageFor(model => model.PriorityID)
                </td>
            </tr>

            <script type="text/javascript">

                jQuery(document).ready(function () {

                    jQuery('.chosen').chosen();
                });
            </script>

            <script type="text/javascript">
                jQuery(".chosen").chosen({ max_selected_options: 10 });
                jQuery(".chosen-deselect").chosen({ allow_single_deselect: true });
                jQuery(".chosen").chosen().change();
                jQuery(".chosen").trigger('liszt:updated');

                var selectedUserID = jQuery('Select#Users').val();
                var Users = "";

                if (selectedUserID != null) {
                    jQuery.each(selectedUserID, function (index, value) {
                        Users = Users + value + ",";
                    });

                    var UserArray = new Array();
                    jQuery('Select#Users').val(UserArray);

                    jQuery('.chzn-select').trigger('chosen:updated');
                }

                var selectedFollowedUserID = jQuery('Select#Users').val();
                var Followers = "";

                if (selectedFollowedUserID != null) {
                    jQuery.each(selectedFollowedUserID, function (index, value) {
                        Followers = Followers + value + ",";
                    });

                    var FollowedUserArray = new Array();
                    jQuery('Select#Followers').val(FollowedUserArray);

                    jQuery('.chzn-select').trigger('chosen:updated');
                }

                var SelectedLabelID = jQuery('Select#Labels').val();
                var Labels = "";

                if (SelectedLabelID != null) {
                    jQuery.each(SelectedLabelID, function (index, value) {
                        Labels = Labels + value + ",";
                    });

                    var LabelArray = new Array();
                    jQuery('Select#Labels').val(LabelArray);

                    jQuery('.chzn-select').trigger('chosen:updated');
                }
            </script>

            <tr>
                <td>Assigned To
                </td>
                <td>
                    @Html.ListBoxFor(m => m.SelectedAssignedUsers, (IEnumerable<SelectListItem>)ViewBag.PossibleUsers,
            new { @class = "chosen", multiple = "multiple", style = "width: 350px;" })
                </td>
            </tr>

            <tr>
                <td>Follower 
                </td>
                <td>

                    @Html.ListBoxFor(m => m.SelectedFollowedUsers, (IEnumerable<SelectListItem>)ViewBag.PossibleUsers,
            new { @class = "chosen", multiple = "multiple", style = "width: 350px;" })
                </td>
            </tr>

            <tr>
                <td>Label 
                </td>
                <td>

                    @Html.ListBoxFor(m => m.SelectedLabels, (IEnumerable<SelectListItem>)ViewBag.PossibleLabels,
            new { @class = "chosen", multiple = "multiple", style = "width: 350px;" })
                </td>
            </tr>


            <tr>
                <td>Status
                </td>
                <td>
                    @Html.DropDownListFor(model => model.ProjectStatusID, ((IEnumerable<PMTool.Models.ProjectStatus>)ViewBag.PossibleTaskStatus).Select(option => new SelectListItem
                       {
                           Text = (option == null ? "None" : option.Name),
                           Value = option.ProjectStatusID.ToString(),
                           Selected = (Model != null) && (option.ProjectStatusID == Model.ProjectStatusID)
                       }), "Choose...")
                </td>
            </tr>

            <tr>
                <td>Sprint
                </td>
                <td>
                    @Html.DropDownListFor(model => model.SprintID, ((IEnumerable<PMTool.Models.Sprint>)ViewBag.PossibleSprints).Select(option => new SelectListItem
                    {
                        Text = (option == null ? "None" : option.Name),
                        Value = option.SprintID.ToString(),
                        Selected = (Model != null) && (option.SprintID == Model.SprintID)
                    }), "Choose...")
                    @Html.ValidationMessageFor(model => model.SprintID)
                </td>
            </tr>
              <tr>
                <td>
                    @Html.LabelFor(model => model.EstimatedPreviewDate)
                </td>
                <td>

                    @Html.TextBoxFor(model => model.EstimatedPreviewDate, "{0:dd/MM/yyyy}", new { @class = "datepicker" })
                    @Html.ValidationMessageFor(model => model.EstimatedPreviewDate)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.ActualPreviewDate)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.ActualPreviewDate, "{0:dd/MM/yyyy}", new { @class = "datepicker" })
                    @Html.ValidationMessageFor(model => model.ActualPreviewDate)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.ActualLiveDate)
                </td>
                <td>

                    @Html.TextBoxFor(model => model.ActualLiveDate, "{0:dd/MM/yyyy}", new { @class = "datepicker" })
                    @Html.ValidationMessageFor(model => model.ActualLiveDate)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.ForecastLiveDate)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.ForecastLiveDate, "{0:dd/MM/yyyy}", new { @class = "datepicker" })
                    @Html.ValidationMessageFor(model => model.ForecastLiveDate)
                </td>
            </tr>
            <tr>
                <td class="width30"></td>
                <td>
                    <input type="submit" id="btnSave" value="Save" class="btn btn-primary" />
                </td>
            </tr>
        </tbody>
    </table>
}

<script type="text/javascript">

    jQuery(document).ready(function () {
        jQuery('#form').removeData('validator');
        jQuery('#form').removeData('unobtrusiveValidation');
        jQuery("#form").each(function () { jQuery.data(jQuery(this)[0], 'validator', false); }); //enable to display the error messages
        jQuery.validator.unobtrusive.parse("#form");

        
    });

</script>

<script type="text/javascript">
    jQuery(".datepicker").datepicker({
        dateFormat: "dd/mm/yy",
        onSelect: function () {
            var sdate = jQuery("#StartDate").val().replace('-', '/');
            var edate = jQuery("#EndDate").val().replace('-', '/');

            if (new Date(sdate) > new Date(edate)) {
                alert('End Date Mustbe grater than Start Date');
                var edate = jQuery("#EndDate").val('');
            }
        }
    });
</script>